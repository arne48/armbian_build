diff --git a/drivers/power/reset/Kconfig b/drivers/power/reset/Kconfig
index 1131cf7..61a8cd4 100644
--- a/drivers/power/reset/Kconfig
+++ b/drivers/power/reset/Kconfig
@@ -173,5 +173,21 @@ config POWER_RESET_ZX
 	help
 	  Reboot support for ZTE SoCs.
 
+config REBOOT_MODE
+	tristate
+	help
+	  This driver will help to pass the system reboot mode
+	  to bootloader
+
+config SYSCON_REBOOT_MODE
+	bool "Generic SYSCON regmap reboot mode driver"
+	depends on OF
+	select REBOOT_MODE
+	help
+	  Say y here will enable reboot mode driver. This will
+	  get reboot mode arguments and store it in SYSCON mapped
+	  register, then the bootloader can read it to take different
+	  action according to the mode.
+
 endif
 
diff --git a/drivers/power/reset/Makefile b/drivers/power/reset/Makefile
index 096fa67..a63865b 100644
--- a/drivers/power/reset/Makefile
+++ b/drivers/power/reset/Makefile
@@ -20,3 +20,5 @@ obj-$(CONFIG_POWER_RESET_SYSCON) += syscon-reboot.o
 obj-$(CONFIG_POWER_RESET_SYSCON_POWEROFF) += syscon-poweroff.o
 obj-$(CONFIG_POWER_RESET_RMOBILE) += rmobile-reset.o
 obj-$(CONFIG_POWER_RESET_ZX) += zx-reboot.o
+obj-$(CONFIG_REBOOT_MODE) += reboot-mode.o
+obj-$(CONFIG_SYSCON_REBOOT_MODE) += syscon-reboot-mode.o
diff --git a/drivers/power/reset/at91-poweroff.c b/drivers/power/reset/at91-poweroff.c
index 2579f02..e9e24df 100644
--- a/drivers/power/reset/at91-poweroff.c
+++ b/drivers/power/reset/at91-poweroff.c
@@ -14,12 +14,9 @@
 #include <linux/io.h>
 #include <linux/module.h>
 #include <linux/of.h>
-#include <linux/of_address.h>
 #include <linux/platform_device.h>
 #include <linux/printk.h>
 
-#include <soc/at91/at91sam9_ddrsdr.h>
-
 #define AT91_SHDW_CR	0x00		/* Shut Down Control Register */
 #define AT91_SHDW_SHDW		BIT(0)			/* Shut Down command */
 #define AT91_SHDW_KEY		(0xa5 << 24)		/* KEY Password */
@@ -53,7 +50,6 @@ static const char *shdwc_wakeup_modes[] = {
 
 static void __iomem *at91_shdwc_base;
 static struct clk *sclk;
-static void __iomem *mpddrc_base;
 
 static void __init at91_wakeup_status(void)
 {
@@ -77,29 +73,6 @@ static void at91_poweroff(void)
 	writel(AT91_SHDW_KEY | AT91_SHDW_SHDW, at91_shdwc_base + AT91_SHDW_CR);
 }
 
-static void at91_lpddr_poweroff(void)
-{
-	asm volatile(
-		/* Align to cache lines */
-		".balign 32\n\t"
-
-		/* Ensure AT91_SHDW_CR is in the TLB by reading it */
-		"	ldr	r6, [%2, #" __stringify(AT91_SHDW_CR) "]\n\t"
-
-		/* Power down SDRAM0 */
-		"	str	%1, [%0, #" __stringify(AT91_DDRSDRC_LPR) "]\n\t"
-		/* Shutdown CPU */
-		"	str	%3, [%2, #" __stringify(AT91_SHDW_CR) "]\n\t"
-
-		"	b	.\n\t"
-		:
-		: "r" (mpddrc_base),
-		  "r" cpu_to_le32(AT91_DDRSDRC_LPDDR2_PWOFF),
-		  "r" (at91_shdwc_base),
-		  "r" cpu_to_le32(AT91_SHDW_KEY | AT91_SHDW_SHDW)
-		: "r0");
-}
-
 static int at91_poweroff_get_wakeup_mode(struct device_node *np)
 {
 	const char *pm;
@@ -151,8 +124,6 @@ static void at91_poweroff_dt_set_wakeup_mode(struct platform_device *pdev)
 static int __init at91_poweroff_probe(struct platform_device *pdev)
 {
 	struct resource *res;
-	struct device_node *np;
-	u32 ddr_type;
 	int ret;
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
@@ -179,30 +150,12 @@ static int __init at91_poweroff_probe(struct platform_device *pdev)
 
 	pm_power_off = at91_poweroff;
 
-	np = of_find_compatible_node(NULL, NULL, "atmel,sama5d3-ddramc");
-	if (!np)
-		return 0;
-
-	mpddrc_base = of_iomap(np, 0);
-	of_node_put(np);
-
-	if (!mpddrc_base)
-		return 0;
-
-	ddr_type = readl(mpddrc_base + AT91_DDRSDRC_MDR) & AT91_DDRSDRC_MD;
-	if ((ddr_type == AT91_DDRSDRC_MD_LPDDR2) ||
-	    (ddr_type == AT91_DDRSDRC_MD_LPDDR3))
-		pm_power_off = at91_lpddr_poweroff;
-	else
-		iounmap(mpddrc_base);
-
 	return 0;
 }
 
 static int __exit at91_poweroff_remove(struct platform_device *pdev)
 {
-	if (pm_power_off == at91_poweroff ||
-	    pm_power_off == at91_lpddr_poweroff)
+	if (pm_power_off == at91_poweroff)
 		pm_power_off = NULL;
 
 	clk_disable_unprepare(sclk);
@@ -210,11 +163,6 @@ static int __exit at91_poweroff_remove(struct platform_device *pdev)
 	return 0;
 }
 
-static const struct of_device_id at91_ramc_of_match[] = {
-	{ .compatible = "atmel,sama5d3-ddramc", },
-	{ /* sentinel */ }
-};
-
 static const struct of_device_id at91_poweroff_of_match[] = {
 	{ .compatible = "atmel,at91sam9260-shdwc", },
 	{ .compatible = "atmel,at91sam9rl-shdwc", },
diff --git a/drivers/power/reset/hisi-reboot.c b/drivers/power/reset/hisi-reboot.c
index f69387e..9ab7f56 100644
--- a/drivers/power/reset/hisi-reboot.c
+++ b/drivers/power/reset/hisi-reboot.c
@@ -53,16 +53,13 @@ static int hisi_reboot_probe(struct platform_device *pdev)
 
 	if (of_property_read_u32(np, "reboot-offset", &reboot_offset) < 0) {
 		pr_err("failed to find reboot-offset property\n");
-		iounmap(base);
 		return -EINVAL;
 	}
 
 	err = register_restart_handler(&hisi_restart_nb);
-	if (err) {
+	if (err)
 		dev_err(&pdev->dev, "cannot register restart handler (err=%d)\n",
 			err);
-		iounmap(base);
-	}
 
 	return err;
 }
diff --git a/drivers/power/reset/reboot-mode.c b/drivers/power/reset/reboot-mode.c
new file mode 100644
index 0000000..09f1bc3
--- /dev/null
+++ b/drivers/power/reset/reboot-mode.c
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/device.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/reboot.h>
+#include "reboot-mode.h"
+
+#define PREFIX "mode-"
+
+struct mode_info {
+	char mode[32];
+	unsigned int magic;
+	struct list_head list;
+};
+
+struct reboot_mode_driver {
+	struct list_head head;
+	int (*write)(int magic);
+	struct notifier_block reboot_notifier;
+};
+
+static int get_reboot_mode_magic(struct reboot_mode_driver *reboot,
+				 const char *cmd)
+{
+	const char *normal = "normal";
+	int magic = 0;
+	struct mode_info *info;
+
+	if (!cmd || !cmd[0])
+		cmd = normal;
+
+	list_for_each_entry(info, &reboot->head, list) {
+		if (!strcmp(info->mode, cmd)) {
+			magic = info->magic;
+			break;
+		}
+	}
+
+	return magic;
+}
+
+static int reboot_mode_notify(struct notifier_block *this,
+			      unsigned long mode, void *cmd)
+{
+	struct reboot_mode_driver *reboot;
+	int magic;
+
+	reboot = container_of(this, struct reboot_mode_driver, reboot_notifier);
+	magic = get_reboot_mode_magic(reboot, cmd);
+	if (magic)
+		reboot->write(magic);
+
+	return NOTIFY_DONE;
+}
+
+int reboot_mode_register(struct device *dev, int (*write)(int))
+{
+	struct reboot_mode_driver *reboot;
+	struct mode_info *info;
+	struct property *prop;
+	size_t len = strlen(PREFIX);
+	int ret;
+
+	reboot = devm_kzalloc(dev, sizeof(*reboot), GFP_KERNEL);
+	if (!reboot)
+		return -ENOMEM;
+
+	reboot->write = write;
+	INIT_LIST_HEAD(&reboot->head);
+	for_each_property_of_node(dev->of_node, prop) {
+		if (len > strlen(prop->name) || strncmp(prop->name, PREFIX, len))
+			continue;
+		info = devm_kzalloc(dev, sizeof(*info), GFP_KERNEL);
+		if (!info)
+			return -ENOMEM;
+		strcpy(info->mode, prop->name + len);
+		if (of_property_read_u32(dev->of_node, prop->name, &info->magic)) {
+			dev_err(dev, "reboot mode %s without magic number\n",
+				info->mode);
+			devm_kfree(dev, info);
+			continue;
+		}
+		list_add_tail(&info->list, &reboot->head);
+	}
+	reboot->reboot_notifier.notifier_call = reboot_mode_notify;
+	ret = register_reboot_notifier(&reboot->reboot_notifier);
+	if (ret)
+		dev_err(dev, "can't register reboot notifier\n");
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(reboot_mode_register);
+
+MODULE_AUTHOR("Andy Yan <andy.yan@rock-chips.com");
+MODULE_DESCRIPTION("System reboot mode driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/power/reset/reboot-mode.h b/drivers/power/reset/reboot-mode.h
new file mode 100644
index 0000000..44ed34f
--- /dev/null
+++ b/drivers/power/reset/reboot-mode.h
@@ -0,0 +1,6 @@
+#ifndef __REBOOT_MODE_H__
+#define __REBOOT_MODE_H__
+
+int reboot_mode_register(struct device *dev, int (*write)(int));
+
+#endif
diff --git a/drivers/power/reset/rockchip-reboot.c b/drivers/power/reset/rockchip-reboot.c
new file mode 100644
index 0000000..1ab43fd
--- /dev/null
+++ b/drivers/power/reset/rockchip-reboot.c
@@ -0,0 +1,141 @@
+/*
+ * Rockchip SoCs Reboot Driver
+ *
+ * Copyright (C) 2015 Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/reboot.h>
+#include <linux/regmap.h>
+#include <linux/of.h>
+#include <linux/mfd/syscon.h>
+#include <linux/rockchip/common.h>
+#include <asm/system_misc.h>
+
+/* high 24 bits is tag, low 8 bits is type */
+#define SYS_LOADER_REBOOT_FLAG   0x5242C300
+#define SYS_KERNRL_REBOOT_FLAG   0xC3524200
+
+enum {
+	BOOT_NORMAL = 0,/* normal boot */
+	BOOT_LOADER,	/* enter loader rockusb mode */
+	BOOT_MASKROM,	/* enter maskrom rockusb mode (not support now) */
+	BOOT_RECOVER,	/* enter recover */
+	BOOT_NORECOVER,	/* do not enter recover */
+	BOOT_SECONDOS,	/* boot second OS (not support now) */
+	BOOT_WIPEDATA,	/* enter recover and wipe data */
+	BOOT_WIPEALL,	/* enter recover and wipe all data */
+	BOOT_CHECKIMG,	/* check firmware img with backup part in loader mode */
+	BOOT_FASTBOOT,	/* enter fast boot mode */
+	BOOT_SECUREBOOT_DISABLE,
+	BOOT_CHARGING,	/* enter charge mode */
+	BOOT_MAX,	/* MAX VALID BOOT TYPE */
+};
+
+static struct regmap *cru;
+static struct regmap *pmugrf;
+
+#define RK3368_CRU_APLLB_CON3	0x0c
+#define RK3368_CRU_APLLL_CON3	0x01c
+#define RK3368_CRU_CPLL_CON3	0x03c
+#define RK3368_CRU_GPLL_CON3	0x04c
+#define RK3368_CRU_NPLL_CON3	0x05c
+#define RK3368_CRU_GLB_SRST_FST_VALUE	0x280
+#define RK3368_CRU_GLB_SRST_SND_VALUE	0x284
+#define RK3368_CRU_GLB_RST_CON	0x388
+#define RK3368_CRU_GLB_RST_ST	0x38c
+
+#define RK3368_PMUGRF_OS_REG0	0x200
+#define RK3368_PMUGRF_OS_REG1	0x204
+
+static void rk3368_reboot(char str, const char *cmd)
+{
+	u32 flag, mode;
+
+	rockchip_restart_get_boot_mode(cmd, &flag, &mode);
+	/* for loader */
+	regmap_write(pmugrf, RK3368_PMUGRF_OS_REG0, flag);
+	/* for linux */
+	regmap_write(pmugrf, RK3368_PMUGRF_OS_REG1, mode);
+
+	/* pll enter slow mode */
+	regmap_write(cru, RK3368_CRU_APLLB_CON3, 0x03000000);
+	regmap_write(cru, RK3368_CRU_APLLL_CON3, 0x03000000);
+	regmap_write(cru, RK3368_CRU_CPLL_CON3, 0x03000000);
+	regmap_write(cru, RK3368_CRU_GPLL_CON3, 0x03000000);
+	regmap_write(cru, RK3368_CRU_NPLL_CON3, 0x03000000);
+	regmap_update_bits(cru, RK3368_CRU_GLB_RST_CON, 3 << 2, 1 << 2);
+	regmap_write(cru, RK3368_CRU_GLB_SRST_SND_VALUE, 0xeca8);
+}
+
+static __init int rk3368_reboot_init(struct platform_device *pdev)
+{
+	u32 flag, mode, rst_st;
+	struct device_node *np = pdev->dev.of_node;
+
+	cru = syscon_regmap_lookup_by_phandle(np, "rockchip,cru");
+	if (IS_ERR(cru)) {
+		dev_err(&pdev->dev, "No rockchip,cru phandle specified");
+		return PTR_ERR(cru);
+	}
+
+	pmugrf = syscon_regmap_lookup_by_phandle(np, "rockchip,pmugrf");
+	if (IS_ERR(pmugrf)) {
+		dev_err(&pdev->dev, "No rockchip,pmugrf phandle specified");
+		return PTR_ERR(pmugrf);
+	}
+
+	regmap_read(pmugrf, RK3368_PMUGRF_OS_REG0, &flag);
+	regmap_read(pmugrf, RK3368_PMUGRF_OS_REG1, &mode);
+	regmap_read(cru, RK3368_CRU_GLB_RST_ST, &rst_st);
+
+	if (flag == (SYS_KERNRL_REBOOT_FLAG | BOOT_RECOVER))
+		mode = BOOT_MODE_RECOVERY;
+	if (rst_st & ((1 << 4) | (1 << 5)))
+		mode = BOOT_MODE_WATCHDOG;
+	else if (rst_st & ((1 << 2) | (1 << 3)))
+		mode = BOOT_MODE_TSADC;
+	rockchip_boot_mode_init(flag, mode);
+
+	arm_pm_restart = rk3368_reboot;
+
+	return 0;
+}
+
+static struct of_device_id rockchip_reboot_of_match[] __refdata = {
+	{ .compatible = "rockchip,rk3368-reboot", .data = rk3368_reboot_init },
+	{}
+};
+
+static int __init rockchip_reboot_probe(struct platform_device *pdev)
+{
+	const struct of_device_id *match;
+	int (*init)(struct platform_device *);
+
+	match = of_match_node(rockchip_reboot_of_match, pdev->dev.of_node);
+	if (match) {
+		init = match->data;
+		if (init)
+			return init(pdev);
+	}
+
+	return 0;
+}
+
+static struct platform_driver rockchip_reboot_driver = {
+	.driver = {
+		.name = "rockchip-reboot",
+		.of_match_table = rockchip_reboot_of_match,
+	},
+};
+
+static int __init rockchip_reboot_init(void)
+{
+	return platform_driver_probe(&rockchip_reboot_driver,
+			rockchip_reboot_probe);
+}
+subsys_initcall(rockchip_reboot_init);
diff --git a/drivers/power/reset/syscon-reboot-mode.c b/drivers/power/reset/syscon-reboot-mode.c
new file mode 100644
index 0000000..d1521d8
--- /dev/null
+++ b/drivers/power/reset/syscon-reboot-mode.c
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2016, Fuzhou Rockchip Electronics Co., Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/platform_device.h>
+#include <linux/reboot.h>
+#include <linux/regmap.h>
+#include <linux/mfd/syscon.h>
+#include "reboot-mode.h"
+
+static struct regmap *map;
+static u32 offset;
+static u32 mask = 0xffffffff;
+
+static int syscon_reboot_mode_write(int magic)
+{
+	regmap_update_bits(map, offset, mask, magic);
+
+	return 0;
+}
+
+static int syscon_reboot_mode_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	map = syscon_node_to_regmap(pdev->dev.parent->of_node);
+	if (IS_ERR(map))
+		return PTR_ERR(map);
+	if (of_property_read_u32(pdev->dev.of_node, "offset", &offset))
+		return -EINVAL;
+	of_property_read_u32(pdev->dev.of_node, "mask", &mask);
+	ret = reboot_mode_register(&pdev->dev, syscon_reboot_mode_write);
+	if (ret)
+		dev_err(&pdev->dev, "can't register reboot mode\n");
+
+	return ret;
+}
+
+static const struct of_device_id syscon_reboot_mode_of_match[] = {
+	{ .compatible = "syscon-reboot-mode" },
+	{}
+};
+
+static struct platform_driver syscon_reboot_mode_driver = {
+	.probe = syscon_reboot_mode_probe,
+	.driver = {
+		.name = "syscon-reboot-mode",
+		.of_match_table = syscon_reboot_mode_of_match,
+	},
+};
+module_platform_driver(syscon_reboot_mode_driver);
+
+MODULE_AUTHOR("Andy Yan <andy.yan@rock-chips.com");
+MODULE_DESCRIPTION("SYSCON reboot mode driver");
+MODULE_LICENSE("GPL v2");
